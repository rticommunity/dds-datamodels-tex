// copyright 2017, 2018 BAE Systems, Thales Group, Object Management Group Inc
// copyright 2022, 2023 BAE Systems, Real-Time Innovations, SimVentions, Object Management Group Inc

#ifndef ORGOMGTEXDATAPAYLOADGROUPPAYLOADDEFVAR
#define ORGOMGTEXDATAPAYLOADGROUPPAYLOADDEFVAR
#include "EntityPayload.idl"
#include "Util.idl"

module org
{

  module omg
  {

    module tex
    {

      module DataPayload
      {

        @doc("GroupPayload is the package of the classes needed to define the data exchanged \
            with a TACSIT system for groups of entities.")
        module GroupPayload
        {

          @doc("A sequence type, to represent multiple values.")
          typedef sequence<org::omg::tex::DataPayload::Util::ExtensionSchema> GroupMetaDataSchemas;

          @doc("A sequence type, to represent multiple values.")
          typedef sequence<org::omg::tex::DataPayload::EntityPayload::EntityRef> GroupPayloadEntities;

          @doc("A string type \
            Typdef for bounded string type for attribute category of class EntityRelationship.")
          typedef string EntityRelationshipCategory;

          @doc("An item of relationship from an entity to another one. This item is moreover \
            specified by a category and lives within a time span.")
          struct EntityRelationship
          {
            @doc("Category of the relationship. This is a string whose content is to be specified \
                by the implementation.")
            EntityRelationshipCategory category;
            @doc("A show/hide period.")
            org::omg::tex::DataPayload::Util::Period timeSpan;
            org::omg::tex::DataPayload::EntityPayload::EntityRef to;
            org::omg::tex::DataPayload::EntityPayload::EntityRef from;
          };

          @doc("A sequence type, to represent multiple values.")
          typedef sequence<EntityRelationship> GroupPayloadLinks;

          @doc("This class gathers the metadata that are specific to units: unit of distance, \
            unit of angle and so forth.")
          struct CoordinateUnits
          {
            @optional org::omg::tex::DataPayload::Util::AngleUnit angleUnit;
            @optional org::omg::tex::DataPayload::Util::CoordinateOrigin coordOrigin;
            @optional org::omg::tex::DataPayload::Util::Projection projection;
            @doc("The speed Unit used by the group. MetersPerSecond is the default.")
            @optional org::omg::tex::DataPayload::Util::SpeedUnit speedUnit;
            @doc("The distance unit used by the group. Meter is the default.")
            @optional org::omg::tex::DataPayload::Util::DistanceUnit distanceUnit;
            @optional org::omg::tex::DataPayload::Util::CoordinateOrientation coordOrientation;
            @optional org::omg::tex::DataPayload::Util::CoordinateKind coordKind;
          };

          @doc("The Meta Data of a group: these metadata apply by default to all the entities of \
            the group. \
            These data include the units which are used in all the attributes of all the \
            entities of the group.")
          struct GroupMetaData
          {
            @doc("Category of the group of entities. This is a string whose content is to be \
                specified by the implementation.")
            string category;
            @doc("An external identifier for the group. This identifier is not bound to be unique \
                among groups.")
            string identifier;
            @doc("The publisher of the group.")
            string publisher;
            @doc("State if the group is read only.")
            boolean isReadOnly;
            @doc("Description of the security classification (e.g. \"Releasable for Internet \
                transmission\").")
            string securityCategory;
            @doc("Security classification in the preceding policy (e.g. UNCLASSIFED, NATO COSMIC \
                SECRET).")
            string securityClassification;
            @doc("Type of security Policy (e.g.: NATO).")
            string securityPolicy;
            GroupMetaDataSchemas schemas;
            CoordinateUnits unitsMetaData;
          };

          @doc("The definition of a group of entities as it appears in the exchanges with TACSIT. \
            Note: the 'id' attribute is used by the TACSIT system to identify the \
            GroupPayload when the 'identifier' attribute of the GroupMetatData is used by the \
            system which requested the creation of this GroupPayload to identity internally \
            it. 'identifier' is so a way to let this using system to find back its data when \
            getting back the group from TACSIT.")
          struct GroupPayload
          {
            @doc("A Uniform Resource Identifier (URI) that uniquely identifies the object.")
            @key org::omg::tex::DataPayload::Util::URI id;
            @doc("Version of the group.")
            string version;
            GroupPayloadEntities entities;
            @optional GroupMetaData metaData;
            GroupPayloadLinks links;
          };

        };
      };
    };
  };
};
#endif
